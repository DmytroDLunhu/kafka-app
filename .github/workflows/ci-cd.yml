name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: kafka
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U user -d kafka"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Build Docker images
        run: |
          docker build -t user-service:latest ./user-service
          docker build -t order-service:latest ./order-service
          docker build -t notification-service:latest ./notification-service

      - name: Push Docker images to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag user-service:latest $DOCKER_USERNAME/user-service:latest
          docker tag order-service:latest $DOCKER_USERNAME/order-service:latest
          docker tag notification-service:latest $DOCKER_USERNAME/notification-service:latest
          docker push $DOCKER_USERNAME/user-service:latest
          docker push $DOCKER_USERNAME/order-service:latest
          docker push $DOCKER_USERNAME/notification-service:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "${KUBE_CONFIG_DATA}" | base64 --decode > ./kubeconfig
          kubectl --kubeconfig=./kubeconfig apply -f kubernetes/
